#+TITLE: FatFin Guide
#+OPTIONS: toc:5
#+PROPERTY: header-args:ruby :colnames no :session readme :hlines yes :exports both :wrap example
#+PROPERTY: header-args:sh :exports code

* Installation

Install the gem and add to the application's Gemfile by executing:

#+begin_src sh
  $ bundle add fat_fin
#+end_src

If bundler is not being used to manage dependencies, install the gem by executing:

#+begin_src sh
  $ gem install fat_fin
#+end_src

* Table of Contents                                            :toc:noexport:
- [[#installation][Installation]]
- [[#usage][Usage]]
  - [[#cashpoint-class][~CashPoint~ class]]
    - [[#constructing-a-cashpoint--object][Constructing a ~CashPoint~  object]]
    - [[#computing-a-cashpoints-value-on-a-different-date-with-value_on-pv-and-fv][Computing a ~CashPoint~'s value on a different date with #value_on (PV and FV)]]
    - [[#computing-the-annualized-growth-rate-between-two-cashpoints-with-cagr-cagr][Computing the annualized growth rate between two ~CashPoints~ with #cagr (CAGR)]]
  - [[#cashflow-class][~CashFlow~ class]]
    - [[#constructing-cashflow-object][Constructing ~CashFlow~ object]]
    - [[#computing-a-cashflows-value-on-a-different-date-with-value_on-npv][Computing a ~CashFlow~'s value on a different date with ~#value_on~ (NPV)]]
    - [[#computing-a-cashflows-internal-rate-of-return-with-irr-irr][Computing a ~CashFlow~'s internal rate of return with ~#irr~ (IRR)]]
    - [[#computing-a-cashflows-a-modified-internal-rate-of-return-with-mirr-mirr-aka-mwirr][Computing a ~CashFlow~'s a modified internal rate of Return with ~#mirr~ (MIRR aka MWIRR)]]
    - [[#using-non-standard-compounding][Using Non-Standard Compounding]]
    - [[#subsetting-cashflow-with-withinperiod][Subsetting ~CashFlow~ with ~#within(period)~]]
- [[#development][Development]]
- [[#contributing][Contributing]]
- [[#license][License]]

* Usage
** ~CashPoint~ class
This gem, ~fat_fin~, defines classes for dealing with certain financial
calculations involving the time-value of money.  It's base class is
~CashPoint~ which represents a quantity of money tied to a particular date.

#+begin_src ruby
  require 'bundler/setup'
  require 'fat_fin'
#+end_src

#+RESULTS:
#+begin_example
false
#+end_example

*** Constructing a ~CashPoint~  object
A new ~CashPoint~ needs an amount and, optionally, a date to be initialized.
If no date is given, it uses the ~Date.today~ as its date.

#+begin_src ruby :session readme
  cp1 = FatFin::CashPoint.new(25_000.00, date: '2021-04-18')
#+end_src

#+begin_example
#<FatFin::CashPoint:0x00007f9a8f882f58 @amount=25000.0, @date=Sun, 18 Apr 2021>
#+end_example

The value for the ~date~ parameter can be a string parseable as a date with
~Date.parse~, a Date object, or any object that responds to the ~#to_date~
method, including ~Time~ and ~DateTime~.

*** Computing a ~CashPoint~'s value on a different date with #value_on (PV and FV)

Once created, you can get its time-value as of any other date at any assumed
interest rate.  For example, at a 5% rate, here is how you would find its
value after more than two years.

#+begin_src ruby
  cp1.value_on('2024-09-12', rate: 0.05)
#+end_src

#+begin_example
29510.979573836776
#+end_example

The same ~value_on~ method works equally well for discounting the value back
to an earlier date with a different interest rate, 6% this time.

#+begin_src ruby
  cp1.value_on('2020-05-16', rate: 0.06)
#+end_src

#+begin_example
23692.035645041837
#+end_example

If no rate is given a 10% rate is (arbitrarily) used and if no date is given,
it uses its own date.  Here's how the value progresses through time:

#+begin_src ruby
  [['2024-09-12', cp1.date.iso, '2020-05-16'], nil,
  [cp1.value_on('2020-05-16'),
   cp1.value_on('2022-05-16'),
   cp1.value_on('2024-05-16')]
  ]
#+end_src

#+begin_example
|         2024-09-12 |        2021-04-18 |         2020-05-16 |
|--------------------+-------------------+--------------------|
| 22896.376327119215 | 27704.61535581425 | 33522.584580535244 |
#+end_example

Besides varying the valuation date and the rate used, the ~#value_on~ method
also allows you to optionally specify the number of compounding periods per
year with the ~freq:~ parameter.  I use the ~#commas~ method from my
~fat_core~ gem here to make the numbers more readable.

#+begin_src ruby
  [[0, 1, 2, 3, 4, 6, 12, :cont], nil,
  [
    cp1.value_on('2024-09-12', freq: 0).commas(2),
    cp1.value_on('2024-09-12', freq: 1).commas(2),
    cp1.value_on('2024-09-12', freq: 2).commas(2),
    cp1.value_on('2024-09-12', freq: 3).commas(2),
    cp1.value_on('2024-09-12', freq: 4).commas(2),
    cp1.value_on('2024-09-12', freq: 6).commas(2),
    cp1.value_on('2024-09-12', freq: 12).commas(2),
    cp1.value_on('2024-09-12', freq: :cont).commas(2),
  ]]
#+end_src

#+begin_example
|         0 |         1 |         2 |         3 |         4 |         6 |        12 |     :cont |
|-----------+-----------+-----------+-----------+-----------+-----------+-----------+-----------|
| 33,500.00 | 34,568.07 | 34,835.92 | 34,929.51 | 34,977.16 | 35,025.40 | 35,074.24 | 35,123.69 |
#+end_example

The frequency must evenly divide 12:

#+begin_src ruby
  cp1.value_on('2024-09-12', freq: 5)
#+end_src

#+begin_example
ArgumentError: Frequency (5) must be a divisor of 12 or :cont.
#+end_example

But what about the other two frequencies, 0 and :cont?  A frequency of 0 is
taken as a request to use simple interest.  That means that not only does
interest /not/ compound yearly nor many times a year, but that it /does not
compound at all/.  Simple interest of 10% for three years amounts to 30%
(10% * 3), while the same interest compounded annually works out closer to
33.1% ($(1 + 0.1)^3 = 1.1^3 = 1.331$)

As for the special frequency represented by the symbol ~:cont~, it goes to the
opposite extreme: compounding continuously.  Though compounding 12 times per
year results in a higher rate than compounding 2 times per year, more frequent
compounding settles to a limit represented by the exponential function.  That
is, compounding a 10% annual rate continuously for 3 years works out to around
34.986%, given by the formula $e^{rt$} where $r$ is the annual interest rate and
$t$ is the number of years interest: $e^{(0.1 * 3)} = e^{(0.3)} = 1.34985880758$.

*** Computing the annualized growth rate between two ~CashPoints~ with #cagr (CAGR)

One measure of how well an investment that has grown from one value on one
date to a larger (hopefully) value on a later date is the CAGR, or
"Cummulative Annual Growth Rate."  It answers the question: in order for my
investment to have grown so much in such-and-such a time, what /annually
compounding/ interest rate would I have had to earn?  A high CAGR indicates a
good annual equivalent return, and a low or even negative CAGR indicates poor
performance.

The ~CashPoint~ class provides a ~#cagr~ method to measure the CAGR between
two ~CashPoints~.  Recall that our ~cp1~ value is 25_000.00 on 2021-04-18.
What CAGR would it represent if it had started out two years earlier as
15_000, 17_000, etc?

#+begin_src ruby
  results = [["Start Value", "CAGR"]], nil
  (15_000..30_000).step(2_000) do |val0|
    cp0 = FatFin::CashPoint.new(val0, date: cp1.date - 2.years)
    results << [ val0.commas(2), cp1.cagr(cp0).round(5) ]
  end
  results
#+end_src

#+begin_example
| (Start Value CAGR) |          |
|--------------------+----------|
|          15,000.00 |  0.29099 |
|          17,000.00 |  0.21268 |
|          19,000.00 |  0.14708 |
|          21,000.00 |  0.09109 |
|          23,000.00 |  0.04257 |
|          25,000.00 |      0.0 |
|          27,000.00 | -0.03775 |
|          29,000.00 | -0.07152 |
#+end_example

Had we started with only 15_000 two years earlier, the CAGR would have been a
very favorable 29%, but it can go the other way too: had we started with
29_000, it would indicate a negative growth of over 7%.

** ~CashFlow~ class

While the ~CashPoint~ class represents a single value at a single point of time,
sometime we want to analyze a whole sequence of ~CashPoints~, and this is what
the ~CashFlow~ class provides.

*** Constructing ~CashFlow~ object

A ~CashFlow~ object consists of a collection of ~CashPoint~ objects that can
be passed to the initializer as an array or can be added to it after creation
with an ~add_time_value~ method or its equivalent, the ~<<~ shovel operator.

Suppose one wanted to model an investment that requires a $40,000 up front
investment and a $5,000 investment after 18 months.  It promises to earn
$2,000 per month for 20 months, then pays a salvage value of $15,000 at the
end of that time.

#+begin_src ruby
  # Upfront costs
  start_date = Date.parse('2022-01-15')
  cps = [
    FatFin::CashPoint.new(-40_000, date: start_date),
    FatFin::CashPoint.new(-5_000, date: start_date + 18.months),
  ]
  flow = FatFin::CashFlow.new(cps)

  # Add additional CashPoints representing the earnings with the << shovel
  # operator
  earn_date = start_date + 1.month
  20.times do |k|
    flow << FatFin::CashPoint.new(2_000, date: earn_date + k.months)
  end

  # Add the salvage value at the end with the add_time_value method.
  flow.add_time_value(FatFin::CashPoint.new(15_000, date: earn_date + 21.months))

  # Format it all as a table
  tab = [["Date", "Amount"], nil]
  flow.time_values.each do |cp|
    tab << [cp.date.iso, cp.amount.commas(2)]
  end
  tab
#+end_src

#+begin_example
| Date       |     Amount |
|------------+------------|
| 2022-01-15 | -40,000.00 |
| 2022-02-15 |   2,000.00 |
| 2022-03-15 |   2,000.00 |
| 2022-04-15 |   2,000.00 |
| 2022-05-15 |   2,000.00 |
| 2022-06-15 |   2,000.00 |
| 2022-07-15 |   2,000.00 |
| 2022-08-15 |   2,000.00 |
| 2022-09-15 |   2,000.00 |
| 2022-10-15 |   2,000.00 |
| 2022-11-15 |   2,000.00 |
| 2022-12-15 |   2,000.00 |
| 2023-01-15 |   2,000.00 |
| 2023-02-15 |   2,000.00 |
| 2023-03-15 |   2,000.00 |
| 2023-04-15 |   2,000.00 |
| 2023-05-15 |   2,000.00 |
| 2023-06-15 |   2,000.00 |
| 2023-07-15 |  -3,000.00 |
| 2023-08-15 |   2,000.00 |
| 2023-09-15 |   2,000.00 |
| 2023-11-15 |  15,000.00 |
#+end_example

*** Computing a ~CashFlow~'s value on a different date with ~#value_on~ (NPV)

Just as you can compute the time-value of a single ~CashPoint~ to any date at
any given rate, so you can do the same to a whole collection of ~CashPoints~
with the ~value_on~ method of ~CashFlow~.  When the value of a collection of
~CashPoints~ is taken as of the date of the first such payment, it is called
the "Net Present Value," or NPV, of the stream of payments.

In the above example, payments out are represented by negative numbers and
receipts are represented by positive numbers.  We can calculate the NPV of the
above stream by applying the ~value_on~ method to the ~CashFlow~ object:

#+begin_src ruby
 flow.value_on('2022-01-15', rate: 0.05)
#+end_src

#+begin_example
7408.202059517813
#+end_example

By default, the date used in the as the first parameter to ~#value_on~ is the
date of the earliest ~CashPoint~ in the collection, i.e., it is the NPV.
Also, if no rate is given, it uses 10%, with a compunding frequency of once
per year.

But we can compute the ~CashFlow~'s value as of any date using any rate:

#+begin_src ruby
 flow.value_on('2019-01-01', rate: 0.05)
#+end_src

#+begin_example
6387.352638966448
#+end_example

And we can use any valid compounding frequency as explained above for
~CashPoints~:

#+begin_src ruby
 flow.value_on('2019-01-01', rate: 0.05, freq: :cont)
#+end_src

#+begin_example
6310.652020627639
#+end_example

*** Computing a ~CashFlow~'s internal rate of return with ~#irr~ (IRR)

One common statistic that investors want to compute with respect to a
~CashFlow~ is the rate that would cause its NPV to equal zero, called the
"Internal Rate of Return," or IRR.

#+begin_src ruby
 flow.irr
#+end_src

#+begin_example
0.234079364687211
#+end_example

Here, we see that the IRR for the flow is around 23.4%.  The IRR calculation
uses a numerical method called the Newton-Raphson method for finding the IRR,
and it involves providing an initial guess and improving the guess at each
step.  You can have the ~#irr~ method report the details of its progress by
adding a ~verbose: true~ parameter to the call:

#+begin_src ruby :results output
 flow.irr(verbose: true)
#+end_src

#+begin_example
Iter: 1, Guess: 0.12080824; NPV: 4211.368371726586; NPV': -45477.219157861255
Iter: 2, Guess: 0.21341216; NPV: 698.480783128293; NPV': -35060.174458779577
Iter: 3, Guess: 0.23333450; NPV: 24.689279931735; NPV': -33189.745060271911
Iter: 4, Guess: 0.23407838; NPV: 0.032625706441; NPV': -33122.089212702573
--------------------
=> 0.23407838015119967
#+end_example

The ~#irr~ method uses an estimated guess for IRR based on ratio of inflows to
outflows over the period of this CashFlow., as the initial guess, but you can
supply a different one with the ~guess:~ parameter:

#+begin_src ruby :results output
 flow.irr(guess: 10, verbose: true)
#+end_src

#+begin_example
=> :NULL
Iter: 1, Guess: 10.00000000; NPV: -31076.312232674067; NPV': 2466.934938552309
Iter: 2, Guess: 22.59713491; NPV: -33396.093041699591; NPV': 1316.229437724939
Iter: 3, Guess: 47.96968173; NPV: -34788.881906937706; NPV': 678.649928872439
Iter: 4, Guess: 99.23157749; NPV: -35730.986737560910; NPV': 345.396370486952
Iter: 5, Guess: 202.68080218; NPV: -36413.549104543825; NPV': 174.685865661662
Iter: 6, Guess: 411.13240739; NPV: -36931.389566140228; NPV': 88.039337218712
Iter: 7, Guess: 830.61977216; NPV: -37337.647293334659; NPV': 44.275823126973
Iter: 8, Guess: 1673.91628607; NPV: -37664.643358944879; NPV': 22.235655099283
Iter: 9, Guess: 3367.80131850; NPV: -37933.241775182250; NPV': 11.156211869213
Iter: 10, Guess: 6767.99147443; NPV: -38157.540518410096; NPV': 5.593531711310
Iter: 10, Guess: 0.50000000; NPV: -7000.358124150653; NPV': -16235.005275863126
Iter: 11, Guess: 0.06881085; NPV: 6508.871286784426; NPV': -52881.147555498646
Iter: 12, Guess: 0.19189576; NPV: 1456.512225106510; NPV': -37214.016867361090
Iter: 13, Guess: 0.23103457; NPV: 101.147353737917; NPV': -33399.895368673504
Iter: 14, Guess: 0.23406294; NPV: 0.544028052369; NPV': -33123.491890867845
Iter: 15, Guess: 0.23407936; NPV: 0.000015873891; NPV': -33121.999771027171
--------------------
#+end_example

But be careful, a bad initial guess can cause the algorithm to spin out of
control, but the ~#irr~ method tries to detect this and adjust the guess if
it sees the guesses exploding:

#+begin_src ruby :results output
 flow.irr(guess: 7, verbose: true)
#+end_src

#+begin_example
=> :NULL
Iter: 1, Guess: 7.00000000; NPV: -29649.413393915813; NPV': 3070.038462184162
Iter: 2, Guess: 16.65766838; NPV: -32652.745358328226; NPV': 1689.984776927528
Iter: 3, Guess: 35.97899352; NPV: -34318.471305710351; NPV': 879.290608451190
Iter: 4, Guess: 75.00871928; NPV: -35403.915257938366; NPV': 449.240734072502
Iter: 5, Guess: 153.81705649; NPV: -36172.392029706331; NPV': 227.656121869119
Iter: 6, Guess: 312.70754330; NPV: -36746.160852021960; NPV': 114.867018986867
Iter: 7, Guess: 632.60929731; NPV: -37190.985548284778; NPV': 57.809166659572
Iter: 8, Guess: 1275.94992471; NPV: -37545.745333550236; NPV': 29.046058385040
Iter: 9, Guess: 2568.57782058; NPV: -37835.014151742158; NPV': 14.578014028063
Iter: 10, Guess: 5163.92545016; NPV: -38075.126132745201; NPV': 7.310919531686
Iter: 10, Guess: 0.50000000; NPV: -7000.358124150653; NPV': -16235.005275863126
Iter: 11, Guess: 0.06881085; NPV: 6508.871286784426; NPV': -52881.147555498646
Iter: 12, Guess: 0.19189576; NPV: 1456.512225106510; NPV': -37214.016867361090
Iter: 13, Guess: 0.23103457; NPV: 101.147353737917; NPV': -33399.895368673504
Iter: 14, Guess: 0.23406294; NPV: 0.544028052369; NPV': -33123.491890867845
Iter: 15, Guess: 0.23407936; NPV: 0.000015873891; NPV': -33121.999771027171
--------------------
#+end_example

This initial guess of 7 caused the iterations to make no progress towards
finding a solution.  When the algorithm detects that the guesses are going out
of control and that the initial guess was not close to the default, it resets
it to the default guess and starts over.  In this case it was able to recover
and get the right answer.

*** Computing a ~CashFlow~'s a modified internal rate of Return with ~#mirr~ (MIRR aka MWIRR)

One assumption that the IRR method makes is that amounts coming in accumulate
interest or value at the same rate as we should discount values going out.
However, this is not always the case.  The rate at which one may borrow values
going out and the rate at which one may earn on values coming in may be quite
different.

$$
\left(\frac{FV}{PV}\right)^{1/y}
$$

#+begin_src ruby :results output
 flow.mirr(earn_rate: 0.05, borrow_rate: 0.07, verbose: true)
#+end_src

#+begin_example
FV of Positive Flow at earn rate (0.05): 54893.43158227642
PV of Negative Flow at borrow rate (0.07): 42710.47613751121
Years from first to last flow: 1.8333333333333333
Modified internal rate of return: 0.14669228773362963
=> 0.14669228773362963
#+end_example

The ~earn_rate~ defaults to 5% and the ~borrow_rate~ defaults to 7% as in the
example, but if your using a credit card to borrow, you will surely want to
supply better values:

#+begin_src ruby :results output
 flow.mirr(earn_rate: 0.05, borrow_rate: 0.21, verbose: true)
#+end_src

#+begin_example
FV of Positive Flow at earn rate (0.05): 54893.43158227642
PV of Negative Flow at borrow rate (0.21): 42253.944402704736
Years from first to last flow: 1.8333333333333333
Modified internal rate of return: 0.1534336394600424
=> 0.1534336394600424
#+end_example


*** Using Non-Standard Compounding

The classical NPV analysis always assumes annual compounding of interest, but
other assumptions are plausible.  So, the ~#irr~ method can be given a ~freq:~
parameter like the ~#value_on~ methods.

Like continuous compounding:

#+begin_src ruby :results output
 flow.irr(freq: :cont, verbose: true)
#+end_src

#+begin_example
Iter: 1, Guess: 0.12080824; NPV: 3896.856472004197; NPV': -46316.936578674700
Iter: 2, Guess: 0.20494283; NPV: 220.828976050425; NPV': -41181.135578639689
Iter: 3, Guess: 0.21030522; NPV: 0.818443834624; NPV': -40876.309787513594
Iter: 4, Guess: 0.21032524; NPV: 0.000011346530; NPV': -40875.176412455738
--------------------
=> 0.21032523850736937
:org_babel_ruby_eoe
#+end_example

Or, egad, simple interest:

#+begin_src ruby :results output
 flow.irr(freq: 0, verbose: true)
#+end_src

#+RESULTS:
#+begin_example
Iter: 1, Guess: 0.12080824; NPV: 4323.380986093362; NPV': 81677.018835546070
Iter: 2, Guess: 0.06787559; NPV: 6595.403324999257; NPV': 67791.417164434592
Iter: 3, Guess: -0.02941406; NPV: 11689.537313470391; NPV': 50659.077239933038
Iter: 4, Guess: -0.26016317; NPV: 33692.699830123915; NPV': 29997.484922976786
Iter: 5, Guess: -1.38334733; NPV: -84822.324157937343; NPV': 7791.568606564050
Iter: 6, Guess: 9.50307727; NPV: -33198.127092559436; NPV': 5850.688659538312
Iter: 7, Guess: 15.17730282; NPV: -35293.524919488984; NPV': 2838.334674129928
Iter: 8, Guess: 27.61189175; NPV: -37160.631861120106; NPV': 207.839657575246
Iter: 9, Guess: 206.40660444; NPV: -39568.575581203790; NPV': 2.252961512096
Iter: 10, Guess: 17769.32340030; NPV: -39994.869345812171; NPV': 0.000288983689
ArgumentError: unknown keyword: :guess
from /home/ded/src/fat_fin/lib/fat_fin/cash_flow.rb:191:in `birr'
:org_babel_ruby_eoe
#+end_example

#+begin_example
Iter: 1, Guess: 0.50000000; NPV: -17500.000000000000; NPV': -55000.000000000000
--------------------
=> 0.18181818181818182
#+end_example

*** Subsetting ~CashFlow~ with ~#within(period)~
The ~#within#~ method allows you to get a ~CashFlow~ object that consists of
only those ~CashPoints~ that fall within a given ~Period~.  The ~fat_fin~ gem
includes ~fat_period~ which defines a ~Period~ class representing a range of
dates. (See [[https://github.com/ddoherty03/fat_period][FatPeriod gem github page]]).

The ~#within~ method takes a ~Period~ parameter and returns a new ~CashFlow~
that contains only those ~CashPoints~ that fall within the given period.
There is a twist, however: it adds a ~CashPoint~ dated the first date of the
period that have a value equal to the ~#value_on~ that date of all
~CashPoint~s that preceded the beginning of the given period.  That way, all
investment activity leading up to the given period is encapsulated in a single
~CashPoint~ at the beginning of the period.

Recall that our ~flow~ example has the following ~CashPoint~s:

#+begin_example
| Date       |     Amount |
|------------+------------|
| 2022-01-15 | -40,000.00 |
| 2022-02-15 |   2,000.00 |
| 2022-03-15 |   2,000.00 |
| 2022-04-15 |   2,000.00 |
| 2022-05-15 |   2,000.00 |
| 2022-06-15 |   2,000.00 |
| 2022-07-15 |   2,000.00 |
| 2022-08-15 |   2,000.00 |
| 2022-09-15 |   2,000.00 |
| 2022-10-15 |   2,000.00 |
| 2022-11-15 |   2,000.00 |
| 2022-12-15 |   2,000.00 |
| 2023-01-15 |   2,000.00 |
| 2023-02-15 |   2,000.00 |
| 2023-03-15 |   2,000.00 |
| 2023-04-15 |   2,000.00 |
| 2023-05-15 |   2,000.00 |
| 2023-06-15 |   2,000.00 |
| 2023-07-15 |  -3,000.00 |
| 2023-08-15 |   2,000.00 |
| 2023-09-15 |   2,000.00 |
| 2023-11-15 |  15,000.00 |
#+end_example

We can take subsets of if by passing the period of interest to ~#within~.  If
we wanted to look at performance during the third quarter of 2022, for
example, we could do this:

#+begin_src ruby
  q3 = Period.parse('2022-3Q')
  flow3q = flow.within(q3)

  # Format it all as a table
  tab = [["Date", "Amount"], nil]
  flow3q.time_values.each do |cp|
    tab << [cp.date.iso, cp.amount.commas(2)]
  end
  tab
#+end_src

#+RESULTS:
#+begin_example
| Date | Amount |
|------+--------|
#+end_example

that part Return a new CashFlow that narrows this CashFlow to the given period.  All
CashPoints before the beginning of the period are rolled up into a single
CashPoint having a date of the beginning of the period and an amount that
represents their value_on that date.  All the CashPoints that fall within the
period are retained and any CashPoints that are beyond the last date of the
period are dropped.


* Development

After checking out the repo, run `bin/setup` to install dependencies. Then,
run `rake spec` to run the tests. You can also run `bin/console` for an
interactive prompt that will allow you to experiment.

To install this gem onto your local machine, run `bundle exec rake
install`. To release a new version, update the version number in `version.rb`,
and then run `bundle exec rake release`, which will create a git tag for the
version, push git commits and the created tag, and push the `.gem` file to
[rubygems.org](https://rubygems.org).

* Contributing

Bug reports and pull requests are welcome on GitHub at https://github.com/ddoherty03/fat_fin.

* License

The gem is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).
